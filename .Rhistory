testTable <- pa_data@data[testSet, ] # a tabel for testing predictions and reference data
testTable$pred <- predict(rf, mydata[testSet, ], type="prob")[,2] # predict the test set
AUCs[k] <- as.numeric(auc)
}
for(k in 1:length(folds)){
trainSet <- unlist(folds[[k]][1]) # extract the training set indices
testSet <- unlist(folds[[k]][2]) # extract the testing set indices
rf <- randomForest(Species~., mydata[trainSet, ]) # model fitting on training set
testTable <- pa_data@data[testSet, ] # a tabel for testing predictions and reference data
testTable$pred <- predict(rf, mydata[testSet, ], type="prob")[,2] # predict the test set
AUCs[k] <- as.numeric(auc)
}
AUCs <- vector()
for(k in 1:length(folds)){
trainSet <- unlist(folds[[k]][1]) # extract the training set indices
testSet <- unlist(folds[[k]][2]) # extract the testing set indices
rf <- randomForest(Species~., mydata[trainSet, ]) # model fitting on training set
testTable <- pa_data@data[testSet, ] # a tabel for testing predictions and reference data
testTable$pred <- predict(rf, mydata[testSet, ], type="prob")[,2] # predict the test set
AUCs[k] <- as.numeric(auc)
}
print(mean(AUCs))
print(sd(AUCs))
AUCs
testTable <- pa_data@data
for(k in 1:length(folds)){
trainSet <- unlist(folds[[k]][1]) # extract the training set indices
testSet <- unlist(folds[[k]][2]) # extract the testing set indices
rf <- randomForest(Species~., mydata[trainSet, ]) # model fitting on training set
testTable$pred <- predict(rf, mydata[testSet, ], type="prob")[,2] # predict the test set
AUCs[k] <- as.numeric(auc)
}
for(k in 1:length(folds)){
trainSet <- unlist(folds[[k]][1]) # extract the training set indices
testSet <- unlist(folds[[k]][2]) # extract the testing set indices
rf <- randomForest(Species~., mydata[trainSet, ]) # model fitting on training set
testTable$pred <- predict(rf, mydata[testSet, ], type="prob")[,2] # predict the test set
AUCs[k] <- as.numeric(auc)
}
library(randomForest)
folds <- bf1$folds
testTable <- pa_data@data
for(k in 1:length(folds)){
trainSet <- unlist(folds[[k]][1]) # extract the training set indices
testSet <- unlist(folds[[k]][2]) # extract the testing set indices
rf <- randomForest(Species~., mydata[trainSet, ]) # model fitting on training set
testTable$pred <- predict(rf, mydata[testSet, ], type="prob")[,2] # predict the test set
}
testTable
testTable <- pa_data@data
for(k in 1:length(folds)){
trainSet <- unlist(folds[[k]][1]) # extract the training set indices
testSet <- unlist(folds[[k]][2]) # extract the testing set indices
rf <- randomForest(Species~., mydata[trainSet, ]) # model fitting on training set
testTable$pred[testSet] <- predict(rf, mydata[testSet, ], type="prob")[,2] # predict the test set
}
testTable
print(mean(testTable$pred))
print(sd(testTable$pred))
testTable
gROC <- ggplot(testTable, aes(m=pred, d=Species)) + geom_roc(n.cuts=0, color='red') + coord_equal() +
geom_abline(intercept = 0, slope = 1) + theme_bw() +
labs(x="False positive rate (1 - specificity)", y="True positive rate (sensitivity)")
library(plotROC)
gROC <- ggplot(testTable, aes(m=pred, d=Species)) + geom_roc(n.cuts=0, color='red') + coord_equal() +
geom_abline(intercept = 0, slope = 1) + theme_bw() +
labs(x="False positive rate (1 - specificity)", y="True positive rate (sensitivity)")
auc <- calc_auc(gROC)[3]
plot(gROC + ggtitle('', subtitle=paste('AUC for testing dataset:', signif(auc, 4))))
testTable <- pa_data@data
testTable
testTable$pred <- NA
for(k in 1:length(folds)){
trainSet <- unlist(folds[[k]][1]) # extract the training set indices
testSet <- unlist(folds[[k]][2]) # extract the testing set indices
rf <- randomForest(Species~., mydata[trainSet, ]) # model fitting on training set
testTable[testSet, "pred"] <- predict(rf, mydata[testSet, ], type="prob")[,2] # predict the test set
}
testTable
gROC <- ggplot(testTable, aes(m=pred, d=Species)) + geom_roc(n.cuts=0, color='red') + coord_equal() +
geom_abline(intercept = 0, slope = 1) + theme_bw() +
labs(x="False positive rate (1 - specificity)", y="True positive rate (sensitivity)")
auc <- calc_auc(gROC)[3]
plot(gROC + ggtitle('', subtitle=paste('AUC for testing dataset:', signif(auc, 4))))
head(mydata)
library(maxnet)
library(raster)
library(colorRamps)
presences <- mydata$Species
mod1 <- maxnet(presences, mydata, regmult=1, maxnet.formula(presences, envData, classes="default"))
mod1 <- maxnet(presences, mydata, regmult=1, maxnet.formula(presences, mydata, classes="default"))
presences <- pb_data$Species
presences <- pa_data$Species
mod1 <- maxnet(presences, mydata, regmult=1, maxnet.formula(presences, mydata, classes="default"))
library(plotROC)
mydata <- extract(awt, pa_data, df=TRUE)
mydata$Species <- as.factor(pa_data$Species)
mydata <- mydata[,2:ncol(mydata)]
mydata
presences <- pa_data$Species
mod1 <- maxnet(presences, mydata, regmult=1, maxnet.formula(presences, mydata, classes="default"))
plot(mod1, type="cloglog")
head(mydata)
mydata <- mydata[,1:11]
head(mydata)
mod1 <- maxnet(presences, mydata, regmult=1, maxnet.formula(presences, mydata, classes="default"))
plot(mod1, type="cloglog")
plot(mod2, "bc01")
plot(mod1, "bc01")
pred2 <- predict(awt, mod1, clamp=T, type=c("cloglog"))
plot(pred2, main="maxnet cloglog output", legend.width=1.5, col=matlab.like2(15))
library(maxnet)
citation("maxnet")
# buffering with presence-background data
bf2 <- buffering(speciesData= pb_data, # presence-background data
species= "Species",
theRange= 68000,
spDataType = "PB",
addBG = TRUE, # add background data to testing folds
progress = T)
mod1 <- maxnet(presences, mydata, regmult=1)
plot(mod1, type="cloglog")
mod1 <- maxnet(presences, mydata, regmult=1, maxnet.formula(presences, mydata, classes="default"))
plot(mod1, type="cloglog")
mod1 <- maxnet(presences, mydata, maxnet.formula(presences, mydata, classes="default"))
plot(mod1, type="cloglog")
mod2 <- maxnet(presences, mydata, maxnet.formula(presences, mydata, classes="lqh"), regmult=2)
plot(mod2, type="cloglog")
mod2 <- maxnet(presences, mydata, classes="lqh", regmult=2)
mod2 <- maxnet(presences, mydata, maxnet.formula(classes="lqh"), regmult=2)
mod2 <- maxnet(maxnet.formula(presences, mydata, classes="lqh"), regmult=2)
# loading the package
library(blockCV)
# import raster data
awt <- raster::brick(system.file("extdata", "awt.tif", package = "blockCV"))
# assign the names of the covariates
names(awt) <- c("bc01",  "bc04",  "bc05",  "bc06",  "bc12",  "bc15",  "bc17",  "bc20",  "bc33", "slope", "topo")
# import presence-background species data
PB <- read.csv(system.file("extdata", "PB.csv", package = "blockCV"))
# make a SpatialPointsDataFrame object from data.frame
pb_data <- SpatialPointsDataFrame(PB[,c("x", "y")], PB, proj4string=crs(awt))
# number of presence and background records
table(pb_data$Species)
# buffering with presence-background data
bf2 <- buffering(speciesData= pb_data, # presence-background data
species= "Species",
theRange= 68000,
spDataType = "PB",
addBG = TRUE, # add background data to testing folds
progress = T)
# buffering with presence-background data
bf2 <- buffering(speciesData= pb_data, # presence-background data
species= "Species",
theRange= 68000,
spDataType = "PB",
addBG = TRUE, # add background data to testing folds
progress = T)
# buffering with presence-background data
bf2 <- buffering(speciesData= pb_data, # presence-background data
species= "Species",
theRange= 68000,
spDataType = "PB",
addBG = TRUE, # add background data to testing folds
progress = T)
library(maxnet)
library(plotROC)
mydata <- extract(awt, pb_data, df=TRUE)
pb <- pb_data$Species
folds <- bf2$folds
k
k=1
k
trainSet <- unlist(folds[[k]][1]) # extract the training set indices
testSet <- unlist(folds[[k]][2]) # extract the testing set indices
testSet
foldExplorer(bf2, awt, pb_data)
mx <- maxnet(pb[trainSet], mydata[trainSet, ], type="cloglog", maxnet.formula(pb, mydata, classes="lqh"))
mx <- maxnet(pb[trainSet], mydata[trainSet, ], type="cloglog", maxnet.formula(pb[trainSet], mydata[trainSet, ], classes="lqh"))
mx <- maxnet(pb[trainSet], mydata[trainSet, ], maxnet.formula(pb[trainSet], mydata[trainSet, ], classes="lqh"))
mx
plot(mx, type="cloglog")
mydata
names(mydata)
mydata <- mydata[,2:ncol(mydata)]
pb <- pb_data$Species
mx <- maxnet(pb[trainSet], mydata[trainSet, ], maxnet.formula(pb[trainSet], mydata[trainSet, ], classes="lqh"))
plot(mx, type="cloglog")
testTable <- pb_data@data[testSet, ] # a tabel for testing predictions and reference data
testTable$pred <- predict(mx, mydata[testSet, ], type="cloglog") # predict the test set
testTable
testTable
which(testTable$Species == 1)
testTable[3340:3350, ]
nrow(testTable)
tail(testTable)
AUCs <- vector()
for(k in 1:length(folds)){
trainSet <- unlist(folds[[k]][1]) # extract the training set indices
testSet <- unlist(folds[[k]][2]) # extract the testing set indices
# fitting a maxent model using linear, quadratic and power features
mx <- maxnet(pb[trainSet], mydata[trainSet, ], maxnet.formula(pb[trainSet], mydata[trainSet, ], classes="lqh"))
# plot(mx, type="cloglog")
testTable <- pb_data@data[testSet, ] # a tabel for testing predictions and reference data
testTable$pred <- predict(mx, mydata[testSet, ], type="cloglog") # predict the test set
auc <- calc_auc(ggplot(testTable, aes(m=pred, d=Species)) + geom_roc(n.cuts = 0))[3]
AUCs[k] <- as.numeric(auc)
}
1:length(folds)
folds <- bf2$folds
bf2$folds
folds <- bf2$folds
testTable <- pa_data@data
1:length(folds)
library(maxnet)
library(plotROC)
mydata <- extract(awt, pb_data, df=TRUE)
mydata <- extract(awt, pb_data, df=TRUE)
mydata <- mydata[,2:ncol(mydata)]
mydata <- mydata[,2:ncol(mydata)]
pb <- pb_data$Species
folds <- bf2$folds
AUCs <- vector()
for(k in 1:length(folds)){
trainSet <- unlist(folds[[k]][1]) # extract the training set indices
testSet <- unlist(folds[[k]][2]) # extract the testing set indices
# fitting a maxent model using linear, quadratic and product features
mx <- maxnet(pb[trainSet], mydata[trainSet, ], maxnet.formula(pb[trainSet], mydata[trainSet, ], classes="lqh"))
# plot(mx, type="cloglog")
testTable <- pb_data@data[testSet, ] # a tabel for testing predictions and reference data
testTable$pred <- predict(mx, mydata[testSet, ], type="cloglog") # predict the test set
auc <- calc_auc(ggplot(testTable, aes(m=pred, d=Species)) + geom_roc(n.cuts = 0))[3]
AUCs[k] <- as.numeric(auc)
}
for(k in 1:length(folds)){
trainSet <- unlist(folds[[k]][1]) # extract the training set indices
testSet <- unlist(folds[[k]][2]) # extract the testing set indices
# fitting a maxent model using linear, quadratic and product features
mx <- maxnet(pb[trainSet], mydata[trainSet, ], maxnet.formula(pb[trainSet], mydata[trainSet, ], classes="lqh"))
# plot(mx, type="cloglog")
testTable <- pb_data@data[testSet, ] # a tabel for testing predictions and reference data
testTable$pred <- predict(mx, mydata[testSet, ], type="cloglog") # predict the test set
auc <- calc_auc(ggplot(testTable, aes(m=pred, d=Species)) + geom_roc(n.cuts = 0))[3]
AUCs[k] <- as.numeric(auc)
print(k)
}
library(blockCV)
library(blockCV)
Sys.setenv(TZ="GMT")
library(blockCV)
library(blockCV)
library(blockCV)
?fortify
library(blockCV)
library(blockCV)
Sys.setenv(TZ="GMT")
library(blockCV)
library(blockCV)
Sys.setenv(TZ="GMT")
library(blockCV)
library(blockCV)
library(blockCV)
library(blockCV)
# loading the package
library(blockCV)
# import presence-absence species data
PA <- read.csv(system.file("extdata", "PA.csv", package = "blockCV"))
head(PA)
table(PA$Species)
?randomForest
library(randomForest)
?randomForest
setwd("/Users/rvalavi/biomod2 files")
setwd("/Users/rvalavi/biomod2 files")
setwd("/Users/rvalavi/biomod2 files")
setwd("/Users/rvalavi/biomod2 files")
setwd("/Users/rvalavi/biomod2")
setwd("/Users/rvalavi/biomod2")
setwd("/Users/rvalavi/biomod2")
Sys.setenv(TZ="GTM")
Sys.setenv(TZ="GTM")
library(blockCV)
library(units)
set_units(10, km)
a <- set_units(10, km)
a
class(a)
a <- set_units(10, degree)
a
set_units(a, km)
set_units(a, km^2)
set_units(a^2, km^2)
a
attr(a)
attr(a, 1)
rm(list=ls())
ls()
library(tidyverse)
install.packages("tidyverse", dependencies = TRUE)
library(tidyverse)
Sys.setenv(TZ="GTM")
Sys.setenv(TZ="GMT")
library(blockCV)
library(blockCV)
?envBlock
Sys.setenv(TZ="GMT")
Sys.setenv(TZ="GTM")
library(blockCV)
raster::minValue()
?sd
?std
library(blockCV)
?envBlock
library(blockCV)
?envBlock
library(blockCV)
?envBlock
library(blockCV)
?envBlock
library(blockCV)
?envBlock
install.packages("testthat")
devtools::use_testthat()
devtools::test()
?Sys.setenv
library(blockCV)
devtools::test()
library(blockCV)
?Sys.setenv
Sys.getenv()
devtools::test()
library(blockCV)
?spatialAutoRange
library(testthat)
library(blockCV)
library(blockCV)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
library(blockCV)
install.packages("ggplot2", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
library(blockCV)
library(blockCV)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
system.file("extdata", "awt.tif", package = "blockCV")
exist(system.file("extdata", "awt.tif", package = "blockCV"))
exists(system.file("extdata", "awt.tif", package = "blockCV"))
file.exists(system.file("extdata", "awt.tif", package = "blockCV"))
file.exists(system.file("extdata", "awt2.tif", package = "blockCV"))
?blockCV::buffering
library(blockCV)
?buffering
devtools::test()
devtools::test()
library(blockCV)
devtools::test()
PB <- read.csv(system.file("extdata", "PB.csv", package = "blockCV"))
dim(PB)
devtools::test()
devtools::test()
?spatilBlock
?blockCV::spatilBlock
library(blockCV)
?spatilBlock
?blockCV
sp::SpatialPointsDataFrame()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
library(blockCV)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
library(blockCV)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
library(blockCV)
library(blockCV)
devtools::test()
library(blockCV)
library(rasterVis)
library(raster)
library(blockCV)
library(blockCV)
library(progress)
library(blockCV)
devtools::check()
library(blockCV)
library(blockCV)
library(blockCV)
library(blockCV)
library(blockCV)
library(blockCV)
citation("blockCV")
library(blockCV)
library(blockCV)
library(blockCV)
library(foreach)
library(blockCV)
library(blockCV)
library(blockCV)
?spatialAutoRange
devtools::check()
library(blockCV)
devtools::use_travis()
devtools::use_travis()
devtools::use_coverage()
covr::codecov()
devtools::install_github("r-lib/covr")
install.packages("covr")
install.packages("covr")
covr::codecov()
report()
covr::report()
library(blockCV)
library(covr)
cov <- covr::package_coverage()
cov
covr::codecov(token= "668a6472-722f-434d-9e77-0187bcb61a88")
devtools::test()
cov <- covr::package_coverage()
cov
shine(cov)
cov <- covr::package_coverage()
cov
shine(cov)
covr::codecov(token= "668a6472-722f-434d-9e77-0187bcb61a88")
library(blockCV)
library(covr)
?package_coverage
cov <- covr::package_coverage(exclusions = "R/explorer.R")
cov <- covr::package_coverage(function_exclusions = c("rangeExplorer", "foldExplorer"))
cov
covr::codecov(token= "668a6472-722f-434d-9e77-0187bcb61a88", function_exclusions = c("rangeExplorer", "foldExplorer"))
sessionInfo()
sessionInfo()
library(blockCV)
sessionInfo()
devtools::test()
valid_udunits()
library(blockCV)
valid_udunits()
devtools::test()
library(blockCV)
library(blockCV)
library(blockCV)
library(blockCV)
library(blockCV)
library(blockCV)
library(blockCV)
library(blockCV)
library(blockCV)
library(blockCV)
library(blockCV)
?blockCV
library(blockCV)
library(blockCV)
library(blockCV)
?`blockCV-package`
library(blockCV)
?`blockCV-package`
?blockCV
dfdwsf
?`blockCV-package`
??`blockCV-package`
install.packages("ggplot")
library(blockCV)
library(blockCV)
library(blockCV)
library(blockCV)
browseVignettes("blockCV")
library(blockCV)
library(blockCV)
library(blockCV)
?registerDoSEQ
??registerDoSEQ
??registerDoSNOW
??registerDoSNOW
foreach::registerDoSEQ()
install.packages("roxygen2")
library(blockCV)
library(blockCV)
library(blockCV)
library(blockCV)
library(blockCV)
library(blockCV)
library(blockCV)
library(blockCV)
library(blockCV)
load(.travis.yml)
open(.travis.yml)
memory.limit()
rcmdcheck::rcmdcheck("/Users/rvalavi/Dropbox/My PhD thesis/My package/blockCV")
library(blockCV)
library(blockCV)
library(blockCV)
